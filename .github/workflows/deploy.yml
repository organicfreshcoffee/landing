name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  CLIENT_SERVICE_NAME: organicfreshcoffee-client
  SERVER_SERVICE_NAME: organicfreshcoffee-server
  REGION: us-central1
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: organicfreshcoffee

jobs:
  test-client:
    name: Test Client
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./client
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Build Next.js app
      run: npm run build

  test-server:
    name: Test Server
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './server/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build TypeScript
      run: npm run build

  deploy-client-staging:
    name: Deploy Client to Staging
    runs-on: ubuntu-latest
    needs: test-client
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      id-token: write
    
    env:
      CLIENT_SERVICE_NAME: organicfreshcoffee-client-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_STAGING }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL_STAGING }}
        
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGISTRY }}
      
    - name: Build Client Docker image for Staging
      run: |
        docker build -f client/Dockerfile.prod \
          --build-arg SERVER_URL=${{ secrets.SERVER_URL_STAGING }} \
          --build-arg AUTH_SERVER_URL=${{ secrets.AUTH_SERVER_URL_STAGING }} \
          -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CLIENT_SERVICE_NAME }}:${{ github.sha }} \
          -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CLIENT_SERVICE_NAME }}:latest \
          ./client
          
    - name: Push Client Docker image for Staging
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CLIENT_SERVICE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CLIENT_SERVICE_NAME }}:latest
        
    - name: Deploy Client to Staging
      run: |
        gcloud run deploy ${{ env.CLIENT_SERVICE_NAME }} \
          --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CLIENT_SERVICE_NAME }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 3000 \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --concurrency 1000 \
          --timeout 300 \
          --set-env-vars NODE_ENV=staging
          
    - name: Get Staging Client URL
      run: |
        CLIENT_URL=$(gcloud run services describe ${{ env.CLIENT_SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
        echo "üöÄ Staging Client deployed successfully!"
        echo "üåê Staging Client URL: $CLIENT_URL"

  deploy-server-staging:
    name: Deploy Server to Staging
    runs-on: ubuntu-latest
    needs: test-server
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      id-token: write
    
    env:
      SERVER_SERVICE_NAME: organicfreshcoffee-server-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_STAGING }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL_STAGING }}
        
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGISTRY }}
      
    - name: Build Server Docker image for Staging
      run: |
        docker build -f server/Dockerfile.prod \
          -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVER_SERVICE_NAME }}:${{ github.sha }} \
          -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVER_SERVICE_NAME }}:latest \
          ./server
          
    - name: Push Server Docker image for Staging
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVER_SERVICE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVER_SERVICE_NAME }}:latest
        
    - name: Deploy Server to Staging
      run: |
        gcloud run deploy ${{ env.SERVER_SERVICE_NAME }} \
          --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVER_SERVICE_NAME }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 3001 \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --concurrency 1000 \
          --timeout 3600 \
          --set-env-vars NODE_ENV=staging,MONGODB_URI=${{ secrets.MONGODB_URI_STAGING }},CLIENT_URL=${{ secrets.CLIENT_URL_STAGING }},AUTH_SERVER_URL=${{ secrets.AUTH_SERVER_URL_STAGING }}
          
    - name: Get Staging Server URL
      run: |
        SERVER_URL=$(gcloud run services describe ${{ env.SERVER_SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
        echo "üöÄ Staging Server deployed successfully!"
        echo "üîó Staging Server URL: $SERVER_URL"
        echo "‚ù§Ô∏è  Staging Health Check: $SERVER_URL/health"

  deploy-client:
    name: Deploy Client to Production
    runs-on: ubuntu-latest
    needs: [test-client, deploy-client-staging, deploy-server-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
        
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGISTRY }}
      
    - name: Build Client Docker image
      run: |
        docker build -f client/Dockerfile.prod \
          --build-arg SERVER_URL=${{ secrets.SERVER_URL }} \
          --build-arg AUTH_SERVER_URL=${{ secrets.AUTH_SERVER_URL }} \
          -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CLIENT_SERVICE_NAME }}:${{ github.sha }} \
          -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CLIENT_SERVICE_NAME }}:latest \
          ./client
          
    - name: Push Client Docker image
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CLIENT_SERVICE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CLIENT_SERVICE_NAME }}:latest
        
    - name: Deploy Client to Cloud Run
      run: |
        gcloud run deploy ${{ env.CLIENT_SERVICE_NAME }} \
          --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.CLIENT_SERVICE_NAME }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 3000 \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --concurrency 1000 \
          --timeout 300 \
          --set-env-vars NODE_ENV=production
          
    - name: Get Client URL
      run: |
        CLIENT_URL=$(gcloud run services describe ${{ env.CLIENT_SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
        echo "üöÄ Production Client deployed successfully!"
        echo "üåê Production Client URL: $CLIENT_URL"

  deploy-server:
    name: Deploy Server to Production
    runs-on: ubuntu-latest
    needs: [test-server, deploy-client-staging, deploy-server-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
        
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGISTRY }}
      
    - name: Build Server Docker image
      run: |
        docker build -f server/Dockerfile.prod \
          -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVER_SERVICE_NAME }}:${{ github.sha }} \
          -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVER_SERVICE_NAME }}:latest \
          ./server
          
    - name: Push Server Docker image
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVER_SERVICE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVER_SERVICE_NAME }}:latest
        
    - name: Deploy Server to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVER_SERVICE_NAME }} \
          --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVER_SERVICE_NAME }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 3001 \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --concurrency 1000 \
          --timeout 3600 \
          --set-env-vars NODE_ENV=production,MONGODB_URI=${{ secrets.MONGODB_URI }},CLIENT_URL=${{ secrets.CLIENT_URL }},AUTH_SERVER_URL=${{ secrets.AUTH_SERVER_URL }}
          
    - name: Get Server URL
      run: |
        SERVER_URL=$(gcloud run services describe ${{ env.SERVER_SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
        echo "üöÄ Production Server deployed successfully!"
        echo "üîó Production Server URL: $SERVER_URL"
        echo "‚ù§Ô∏è  Production Health Check: $SERVER_URL/health"
